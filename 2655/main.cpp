#include <iostream>
#include <map>
#include <vector>
using namespace std;
map<int, int[3]> blockList; //key:무게 value[0]:넓이 value[1]: 높이  value[2]:번호
map<int, int[3]>::iterator iter;
map<int, int[3]>::iterator iter2;
vector<int> solution;

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int N, A, H, W;
	cin >> N;
	int* maxHeightList = new int[N];
	int index=0;
	int max= 0;
	for (int i = 0; i < N; i++)
	{
			maxHeightList[i] = 0;
	}

	for (int i = 1; i <= N; i++)
	{
		cin >> A >> H >> W;
		blockList[W][0] = A;
		blockList[W][1] = H;
		blockList[W][2] = i;
	}
	iter = blockList.begin();
	for (int i = 0; i < N; i++)
	{
		iter2 = blockList.begin();
		maxHeightList[i] = iter->second[1];
		for (int j = 0; j < i; j++)
		{
			if (iter->second[0] > iter2->second[0])
				maxHeightList[i] = maxHeightList[i]> maxHeightList[j] + iter->second[1]? maxHeightList[i] : maxHeightList[j] + iter->second[1];
			iter2++;
		}
		iter++;
	}

	for (int i = 0; i < N; i++)
	{
		if (maxHeightList[i] > max)
		{
			max = maxHeightList[i]; //높이가 가장 큰 인덱스값 찾는 과정
			index = i;
		}	
	}
	while (true) //테이블 역추적
	{
		iter = blockList.begin();
		for (int i = 0; i < index; i++)
		{
			iter++;
		}
		solution.push_back(iter->second[2]);
		if (maxHeightList[index] - iter->second[1] == 0) //높이가 0이 되면 루프 탈출
		{
			break;
		}
		for(int i = 0; i<=index;i++)
		{
			
			if (maxHeightList[i] == maxHeightList[index] - iter->second[1])
			{
				index = i;
				break;
			}
		}
	}

	int sizeSol = solution.size();
	cout << sizeSol << "\n";
	for (int i = sizeSol-1; i>=0; i--)
	{
		cout << solution[i]<<"\n";
	}
	return 0;
}

/*
3
1 1 1
2 2 2
3 3 3
답: 1 2 3

3
2 1 3
1 1 2
3 3 1
답: 1 3

100
986 669 360
693 702 138
571 346 497
152 284 869
434 380 232
615 469 970
19 280 890
969 978 68
712 891 322
978 757 29
814 576 820
781 168 139
825 885 103
61 994 382
37 99 654
793 810 571
290 745 182
847 184 655
860 33 415
593 95 618
55 885 658
387 933 315
26 466 530
600 127 428
721 922 645
805 89 620
386 396 441
902 114 259
755 63 557
987 464 854
308 170 346
730 339 421
918 723 13
245 241 560
699 186 129
1 332 895
378 293 268
817 339 408
704 848 218
457 670 806
144 323 756
97 225 148
961 662 430
738 741 529
129 406 146
475 428 946
494 777 396
69 899 507
154 702 555
839 782 355
60 955 937
696 604 19
685 710 211
520 277 405
237 698 23
743 680 209
627 969 395
878 910 491
573 388 904
139 785 699
127 249 723
75 657 95
418 35 273
471 66 899
178 216 324
100 589 956
297 621 340
206 314 938
268 769 968
321 311 161
30 518 15
43 959 47
952 244 681
6 920 227
120 493 116
945 948 682
823 298 992
647 786 383
281 460 926
319 925 130
285 673 156
908 582 998
52 37 358
876 405 51
464 946 392
536 469 352
28 568 887
20 15 715
920 463 827
197 103 452
729 336 509
586 983 975
974 113 740
441 822 490
57 493 665
289 871 511
789 273 556
703 505 920
466 647 625
939 805 1
답: 22
71
72
62
75
45
81
17
37
22
85
47
54
3
91
44
97
16
26
18
76
93
30

5
948 359 180
407 280 838
330 886 12
11 258 546
76 588 281
2
3
1

5
855 603 567
688 986 43
236 878 159
201 525 331
250 667 552
3
3
5
1

5
817 678 344
742 221 409
398 707 170
682 667 148
573 742 726
2
3
5

10
849 71 70
748 697 759
779 13 612
188 54 165
945 202 762
599 820 786
66 751 297
372 504 95
630 785 306
230 137 254
4
7
9
2
5

10
362 489 977
575 678 592
279 777 538
673 651 571
987 752 941
501 590 851
289 109 104
858 9 70
943 363 689
214 439 673
4
3
2
9
5

20
636 665 716
901 880 643
738 813 723
391 793 180
216 296 382
200 734 329
273 948 287
201 996 166
438 377 762
920 728 726
608 219 137
684 975 629
71 362 427
928 258 418
653 807 919
449 968 274
239 440 774
329 767 606
845 721 143
221 695 151
6
8
4
16
12
2
10

20
121 125 951
118 672 704
845 500 716
768 160 231
176 718 894
206 504 837
983 235 500
292 980 29
40 128 963
937 232 999
332 850 611
471 783 571
426 764 30
242 67 942
794 578 727
39 164 813
560 66 303
967 468 58
134 322 452
200 483 890
5
8
13
12
15
10

20
732 140 628
548 642 505
805 369 747
412 315 159
971 810 457
295 561 546
663 254 637
824 595 926
947 654 5
53 116 659
32 592 551
302 111 80
422 687 471
734 491 230
92 765 748
83 301 594
265 293 350
130 493 964
46 581 625
122 612 772
6
11
19
10
15
20
8

100
644 278 922
959 161 879
331 644 82
704 716 67
641 547 800
230 472 416
8 935 414
867 193 805
131 279 587
842 489 905
833 910 35
649 828 826
729 806 61
909 665 576
182 704 305
255 788 394
269 410 839
768 308 73
295 970 965
335 804 232
192 707 197
594 561 202
28 525 216
661 71 986
546 861 198
438 994 134
650 925 361
680 294 255
195 913 567
660 937 461
396 411 346
62 731 372
405 760 147
916 747 447
651 777 926
442 21 974
114 513 203
967 313 628
519 234 12
531 84 899
845 324 784
346 329 617
6 874 336
431 915 554
498 324 733
921 639 992
7 904 957
237 301 618
632 853 126
854 738 644
791 508 607
765 993 596
618 462 947
963 239 884
71 311 500
267 531 7
254 897 398
209 433 325
135 3 551
511 649 842
839 668 428
540 896 626
225 506 639
117 982 780
371 252 553
715 134 901
500 205 999
56 206 223
847 551 588
779 876 569
10 974 787
599 519 527
898 613 219
123 976 583
40 180 830
840 465 643
469 300 225
25 895 94
352 231 944
980 640 182
429 941 665
539 574 789
583 491 870
190 461 793
571 216 715
939 938 889
998 254 115
663 175 353
231 875 568
747 305 799
459 983 761
812 857 995
989 806 28
960 759 51
933 229 78
817 675 2
573 457 65
748 130 471
788 57 357
694 692 16
17
78
23
68
32
55
59
29
89
42
81
91
82
5
12
35
24
92

100
708 407 888
433 333 822
536 817 346
418 567 85
130 539 735
924 807 915
903 943 951
949 460 695
1 952 539
136 660 621
126 635 356
34 542 433
764 344 378
528 137 837
152 864 973
836 461 13
517 216 857
472 890 95
278 386 561
875 826 479
745 402 448
481 767 401
18 751 698
783 877 575
3 921 608
501 481 151
658 468 874
274 661 352
600 885 578
250 803 642
761 806 64
899 963 657
587 835 104
380 790 880
650 235 415
711 126 949
414 536 702
312 572 367
831 423 74
916 800 558
106 194 288
858 910 417
669 93 628
276 386 456
251 924 319
787 639 573
946 90 427
238 748 299
801 582 162
841 156 225
112 419 570
431 235 349
63 314 620
244 160 763
246 190 998
196 170 939
698 657 455
235 465 248
233 83 637
954 790 791
110 89 978
585 614 559
382 680 165
253 832 653
971 887 552
303 597 202
921 38 267
549 652 585
737 181 989
156 177 9
224 487 546
445 946 530
75 443 89
428 825 224
427 870 697
758 789 67
677 165 679
222 487 545
926 924 905
188 103 952
579 71 862
264 382 329
606 141 219
324 273 467
751 433 156
976 686 526
369 525 627
113 403 683
171 933 934
683 365 629
199 410 255
189 456 810
495 314 673
945 605 167
582 478 519
422 483 137
321 120 527
943 562 369
588 458 696
663 850 449
15
73
58
48
45
82
28
38
22
35
100
57
24
32
8
60
*/